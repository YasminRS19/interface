# -*- coding: utf-8 -*-
"""interface de classificação .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PHMFmnaOew1Q9AP10QH5FLyfzbBMcXwb
"""

import pandas as pd

url='https://drive.google.com/file/d/1EO2kECD4idaQhkS_XESX_Q1hQNnQRU8q/view?usp=sharing'
df = pd.read_csv(url)

df.head()

df.columns

df = df.filter(items=['Quer_Fazer_Graduacao',
       'Nota_1Semestre', 'Nota_2Semestre', ])

#df = df.filter(items=['Sexo', 'Tempo_Estudo_Semanal', 'Quer_Fazer_Graduacao', 'Tem_Internet',
#      'Esta_Namorando', 'Boa_Convivencia_Familia', 'Tempo_Livre_Apos_Escola', 'Falta_Escolar', 'Nota_1Semestre', 'Nota_2Semestre'])

df['Quer_Fazer_Graduacao'].value_counts()

df['Quer_Fazer_Graduacao'] = df['Quer_Fazer_Graduacao'].map({'Sim':1, 'Não':0})

#df['Esta_Namorando'].value_counts()

#df['Esta_Namorando'] = df['Esta_Namorando'].map({'Sim':1, 'Não':0})

df.info()

from sklearn.decomposition import PCA
from sklearn.preprocessing import MinMaxScaler

#normalizando todos os valores do dataframe
scaling=MinMaxScaler()
# Use fit and transform method
scaling.fit(df)
Scaled_data=scaling.transform(df)
# Set the n_components=3
#principal=PCA(n_components=3)
#ou passa o valor de covariancia, quanto maior mais próximo do original
principal=PCA(0.99)
principal.fit(Scaled_data)
x=principal.transform(Scaled_data)
# Check the dimensions of data after PCA
print(x.shape)

y = df['Quer_Fazer_Graduacao']
X = df.drop(columns=['Quer_Fazer_Graduacao'])

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20,random_state=123)

"""# BaggingClassifier"""

from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier
modelo = BaggingClassifier(DecisionTreeClassifier(),n_estimators=10,random_state=None).fit(X_train, y_train)
modelo = modelo.fit(X_train, y_train)

y_pred = modelo.predict(X_test)

print (pd.crosstab(y_test,y_pred, rownames=['Real'], colnames=['Predito'], margins=True))

from sklearn import metrics
print(metrics.classification_report(y_test,y_pred))

from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_validate
import numpy as np

n_folders = 5

modelo = BaggingClassifier(DecisionTreeClassifier(),n_estimators=15,random_state=42)

cross_val = StratifiedKFold(n_splits=n_folders, shuffle=True, random_state=32)

nome_metricas = ['accuracy', 'precision_macro', 'recall_macro','f1_macro']

metricas = cross_validate(modelo, X, y, cv=cross_val, scoring=nome_metricas)
for met in metricas:
    print(f"- {met}:")
    print(f"-- {metricas[met]}")
    print(f"-- {np.mean(metricas[met])} +- {np.std(metricas[met])}\n")

"""#Exportar um modelo"""

import pickle
with open('modelo.pkl', 'wb') as file:
    pickle.dump(modelo, file)

from google.colab import files
files.download('modelo.pkl')

"""#Importar um modelo"""

arquivo = files.upload()

with open('modelo.pkl', 'rb') as f:
    model = pickle.load(f)

with open('modelo.pkl', 'rb') as f:
    model = pickle.load(f)

"""Ada Bost"""

from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
modelo = AdaBoostClassifier(n_estimators=100, random_state=0).fit(X_train, y_train)
modelo = modelo.fit(X_train, y_train)

y_pred = modelo.predict(X_test)

print (pd.crosstab(y_test,y_pred, rownames=['Real'], colnames=['Predito'], margins=True))

from sklearn import metrics
print(metrics.classification_report(y_test,y_pred))

from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_validate
import numpy as np

n_folders = 5

modelo = AdaBoostClassifier(n_estimators=100, random_state=0)

cross_val = StratifiedKFold(n_splits=n_folders, shuffle=True, random_state=32)

nome_metricas = ['accuracy', 'precision_macro', 'recall_macro','f1_macro']

metricas = cross_validate(modelo, X, y, cv=cross_val, scoring=nome_metricas)
for met in metricas:
    print(f"- {met}:")
    print(f"-- {metricas[met]}")
    print(f"-- {np.mean(metricas[met])} +- {np.std(metricas[met])}\n")

"""# KNN"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
modelo = KNeighborsClassifier(n_neighbors=2).fit(X_train, y_train)
modelo = modelo.fit(X_train, y_train)

y_pred = modelo.predict(X_test)

print (pd.crosstab(y_test,y_pred, rownames=['Real'], colnames=['Predito'], margins=True))

from sklearn import metrics
print(metrics.classification_report(y_test,y_pred))

from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_validate
import numpy as np

n_folders = 5

modelo = KNeighborsClassifier(n_neighbors=3)

cross_val = StratifiedKFold(n_splits=n_folders, shuffle=True, random_state=32)

nome_metricas = ['accuracy', 'precision_macro', 'recall_macro','f1_macro']

metricas = cross_validate(modelo, X, y, cv=cross_val, scoring=nome_metricas)
for met in metricas:
    print(f"- {met}:")
    print(f"-- {metricas[met]}")
    print(f"-- {np.mean(metricas[met])} +- {np.std(metricas[met])}\n")

from sklearn.ensemble import RandomForestClassifier
modelo = RandomForestClassifier(max_depth=12, random_state=0).fit(X_train, y_train)
modelo = modelo.fit(X_train, y_train)

y_pred = modelo.predict(X_test)

print (pd.crosstab(y_test,y_pred, rownames=['Real'], colnames=['Predito'], margins=True))

from sklearn import metrics
print(metrics.classification_report(y_test,y_pred))

from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_validate
import numpy as np

n_folders = 5

modelo = RandomForestClassifier(max_depth=2, random_state=0)

cross_val = StratifiedKFold(n_splits=n_folders, shuffle=True, random_state=32)

nome_metricas = ['accuracy', 'precision_macro', 'recall_macro','f1_macro']

metricas = cross_validate(modelo, X, y, cv=cross_val, scoring=nome_metricas)
for met in metricas:
    print(f"- {met}:")
    print(f"-- {metricas[met]}")
    print(f"-- {np.mean(metricas[met])} +- {np.std(metricas[met])}\n")

